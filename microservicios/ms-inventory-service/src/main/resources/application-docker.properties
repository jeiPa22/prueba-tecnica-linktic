# Puerto HTTP
server.port=8081

# Datasource (local host)
spring.datasource.url=jdbc:postgresql://inventory-db:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# Si corre dentro de docker-compose junto a Postgres, usar el host del servicio:
# spring.datasource.url=jdbc:postgresql://db:5432/postgres

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.default_schema=inventory


# Flyway: aislar historial para este MS
spring.flyway.enabled=true
spring.flyway.default-schema=inventory
spring.flyway.schemas=inventory
spring.flyway.create-schemas=true
spring.flyway.table=flyway_schema_history_inventory

# Springdoc / Swagger UI
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
# Ruta por defecto de la UI: /swagger-ui.html
# springdoc.swagger-ui.path=/swagger-ui.html

# Logging estructurado en consola (ECS, GELF o LOGSTASH)
logging.structured.format.console=ecs
logging.structured.ecs.service.name=inventory-service
logging.structured.ecs.service.version=1
logging.level.root=INFO

# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true

# Seguridad por API key (si aplica en inventory)
inventory.security.header=X-API-KEY
inventory.security.expectedKey=${INVENTORY_API_KEY:inventory-secret}

# Configuraci√≥n del cliente REST para Products
inventory.products.base-url=http://localhost:8080
inventory.products.api-key-header=X-API-KEY
inventory.products.api-key=${PRODUCTS_API_KEY:products-secret}
inventory.products.timeouts.connect-millis=5000
inventory.products.timeouts.read-millis=10000