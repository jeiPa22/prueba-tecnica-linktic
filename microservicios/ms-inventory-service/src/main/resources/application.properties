# Server
server.port=8081

# Datasource (WSL + Postgres en Docker del host)
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres

# JPA/Hibernate
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway
spring.flyway.enabled=true

# doc spring-doc-openapi
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# Retry
resilience4j.retry.instances.products.max-attempts=3
resilience4j.retry.instances.products.wait-duration=200ms
resilience4j.retry.instances.products.retry-exceptions=org.springframework.web.client.HttpServerErrorException,java.net.SocketTimeoutException

# Circuit Breaker
resilience4j.circuitbreaker.instances.products.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.products.sliding-window-size=10
resilience4j.circuitbreaker.instances.products.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.products.wait-duration-in-open-state=5s

# Inventory service security
inventory.security.header=X-API-KEY
inventory.security.expectedKey=${INVENTORY_API_KEY:inventory-secret}
inventory.products.baseUrl=${PRODUCTS_BASE_URL:http://localhost:8080}
inventory.products.apiKeyHeader=X-API-KEY
inventory.products.apiKey=${PRODUCTS_API_KEY:products-secret}
inventory.products.timeouts.connectMillis=2000
inventory.products.timeouts.readMillis=3000